---
# --- Role-aware protected services merge ---
- name: "SECTION-X | SUB-TASK | Merge protected services based on server role"
  ansible.builtin.set_fact:
    cis_ubuntu2404_effective_protected_services: >-
      {{
        (cis_ubuntu2404_protected_services | default([]))
        + (
          cis_ubuntu2404_role_protected_services[firewall_role | default('')] 
          | default([])
        )
      | unique
      }}
  tags:
    - always

- name: "SECTION-X | SUB-TASK | Ensure services are not in use or purged | service rule info"
  ansible.builtin.debug:
    msg: "{{ outer_item.title }}"

- name: "SECTION-X | SUB-TASK | Ensure services are not in use or purged | check if service available"
  ansible.builtin.shell: |
    set -o pipefail &&
    systemctl show {{ item }} | grep -E "LoadState|ActiveState" | cut -d = -f 2 | tr -d '\n'
  args:
    executable: "{{ cis_ubuntu2404_shell_executable }}"
  loop: "{{ outer_item.service | flatten(levels=1) }}"
  register: service_status_check_loop_2_1
  changed_when: false
  check_mode: false
  when:
    - outer_item.service is defined
    - outer_item.disable | bool

- name: "SECTION-X | SUB-TASK | Ensure services are not in use or purged | disable and mask service"
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    daemon_reload: true
    enabled: false
    masked: true
    state: stopped
  loop: "{{ outer_item.service | flatten(levels=1) }}"
  when:
    - outer_item.service is defined
    - outer_item.disable | bool
    - service_status_check_loop_2_1.results
      | selectattr('item', 'equalto', item)
      | map(attribute='stdout') | list | first
      in ('loadedactive','loadedinactive')
    - item not in (cis_ubuntu2404_effective_protected_services | default([]))

- name: "SECTION-X | SUB-TASK | Ensure services are not in use or purged | purge task"
  when:
    - outer_item.apt is defined
    - outer_item.remove | bool
  block:
    - name: "SECTION-X | SUB-TASK | Ensure services are not in use or purged | purge candidate info"
      ansible.builtin.debug:
        msg: "Packages to be removed: {{ outer_item.apt }}"

    - name: "SECTION-X | SUB-TASK | Ensure services are not in use or purged | attempt purge service"
      ansible.builtin.apt:
        name: "{{ outer_item.apt }}"
        state: absent
        purge: true
      register: purge_result
      failed_when: false
      ignore_errors: true
      when: >
        (
          outer_item.apt | flatten(levels=1)
          | map('regex_replace', '\.service$', '')
          | difference(cis_ubuntu2404_effective_protected_services | default([]))
          | length > 0
        )

- name: "SECTION-X | SUB-TASK | Warn if purge skipped due to dependency issues"
  ansible.builtin.debug:
    msg: "Skipping purge of {{ outer_item.apt }} due to dependency conflicts. Manual review required."
  when:
    - purge_result.failed | default(false)

# --- Restore protected services if they were disabled ---
- name: "SECTION-X | POST | Ensure protected services are running if present"
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    state: started
    enabled: true
    masked: false
  loop: "{{ cis_ubuntu2404_effective_protected_services | default([]) }}"
  register: restore_protected_services
  ignore_errors: true
  failed_when: false
  tags:
    - always
